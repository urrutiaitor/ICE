// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `VectorManipulator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package utils;

public final class VectorManipulatorPrxHelper extends Ice.ObjectPrxHelperBase implements VectorManipulatorPrx
{
    private static final String __copyWithoutDuplicates_name = "copyWithoutDuplicates";

    public void copyWithoutDuplicates(int[] inVector, IntVectorHolder outVector)
    {
        copyWithoutDuplicates(inVector, outVector, null, false);
    }

    public void copyWithoutDuplicates(int[] inVector, IntVectorHolder outVector, java.util.Map<String, String> __ctx)
    {
        copyWithoutDuplicates(inVector, outVector, __ctx, true);
    }

    private void copyWithoutDuplicates(int[] inVector, IntVectorHolder outVector, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__copyWithoutDuplicates_name);
        end_copyWithoutDuplicates(outVector, begin_copyWithoutDuplicates(inVector, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector)
    {
        return begin_copyWithoutDuplicates(inVector, null, false, false, null);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, java.util.Map<String, String> __ctx)
    {
        return begin_copyWithoutDuplicates(inVector, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, Ice.Callback __cb)
    {
        return begin_copyWithoutDuplicates(inVector, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_copyWithoutDuplicates(inVector, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, Callback_VectorManipulator_copyWithoutDuplicates __cb)
    {
        return begin_copyWithoutDuplicates(inVector, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, java.util.Map<String, String> __ctx, Callback_VectorManipulator_copyWithoutDuplicates __cb)
    {
        return begin_copyWithoutDuplicates(inVector, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, 
                                                       IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_copyWithoutDuplicates(inVector, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, 
                                                       IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_copyWithoutDuplicates(inVector, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_copyWithoutDuplicates(inVector, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_copyWithoutDuplicates(inVector, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_copyWithoutDuplicates(inVector, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1<int[]>(__responseCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       VectorManipulatorPrxHelper.__copyWithoutDuplicates_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_copyWithoutDuplicates(int[] inVector, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__copyWithoutDuplicates_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__copyWithoutDuplicates_name, __cb);
        try
        {
            __result.prepare(__copyWithoutDuplicates_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            IntVectorHelper.write(__os, inVector);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_copyWithoutDuplicates(IntVectorHolder outVector, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __copyWithoutDuplicates_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            outVector.value = IntVectorHelper.read(__is);
            __result.endReadParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __copyWithoutDuplicates_completed(Ice.TwowayCallbackArg1<int[]> __cb, Ice.AsyncResult __result)
    {
        utils.VectorManipulatorPrx __proxy = (utils.VectorManipulatorPrx)__result.getProxy();
        IntVectorHolder outVector = new IntVectorHolder();
        try
        {
            __proxy.end_copyWithoutDuplicates(outVector, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(outVector.value);
    }

    private static final String __sort_name = "sort";

    public void sort(int[] inVector, IntVectorHolder outVector)
    {
        sort(inVector, outVector, null, false);
    }

    public void sort(int[] inVector, IntVectorHolder outVector, java.util.Map<String, String> __ctx)
    {
        sort(inVector, outVector, __ctx, true);
    }

    private void sort(int[] inVector, IntVectorHolder outVector, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__sort_name);
        end_sort(outVector, begin_sort(inVector, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sort(int[] inVector)
    {
        return begin_sort(inVector, null, false, false, null);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, java.util.Map<String, String> __ctx)
    {
        return begin_sort(inVector, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, Ice.Callback __cb)
    {
        return begin_sort(inVector, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sort(inVector, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, Callback_VectorManipulator_sort __cb)
    {
        return begin_sort(inVector, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, java.util.Map<String, String> __ctx, Callback_VectorManipulator_sort __cb)
    {
        return begin_sort(inVector, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, 
                                      IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sort(inVector, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, 
                                      IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sort(inVector, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sort(inVector, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sort(int[] inVector, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sort(inVector, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sort(int[] inVector, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sort(inVector, __ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackArg1<int[]>(__responseCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      VectorManipulatorPrxHelper.__sort_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_sort(int[] inVector, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sort_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sort_name, __cb);
        try
        {
            __result.prepare(__sort_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            IntVectorHelper.write(__os, inVector);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sort(IntVectorHolder outVector, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __sort_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            outVector.value = IntVectorHelper.read(__is);
            __result.endReadParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __sort_completed(Ice.TwowayCallbackArg1<int[]> __cb, Ice.AsyncResult __result)
    {
        utils.VectorManipulatorPrx __proxy = (utils.VectorManipulatorPrx)__result.getProxy();
        IntVectorHolder outVector = new IntVectorHolder();
        try
        {
            __proxy.end_sort(outVector, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(outVector.value);
    }

    public static VectorManipulatorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), VectorManipulatorPrx.class, VectorManipulatorPrxHelper.class);
    }

    public static VectorManipulatorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), VectorManipulatorPrx.class, VectorManipulatorPrxHelper.class);
    }

    public static VectorManipulatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), VectorManipulatorPrx.class, VectorManipulatorPrxHelper.class);
    }

    public static VectorManipulatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), VectorManipulatorPrx.class, VectorManipulatorPrxHelper.class);
    }

    public static VectorManipulatorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, VectorManipulatorPrx.class, VectorManipulatorPrxHelper.class);
    }

    public static VectorManipulatorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, VectorManipulatorPrx.class, VectorManipulatorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::utils::VectorManipulator"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, VectorManipulatorPrx v)
    {
        __os.writeProxy(v);
    }

    public static VectorManipulatorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            VectorManipulatorPrxHelper result = new VectorManipulatorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
